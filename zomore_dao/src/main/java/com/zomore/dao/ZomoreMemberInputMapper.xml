<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zomore.dao.ZomoreMemberInputMapper">

  <resultMap id="BaseResultMap" type="com.zomore.domain.ZomoreMemberInput">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="member_num" jdbcType="VARCHAR" property="memberNum" />
    <result column="member_name" jdbcType="VARCHAR" property="memberName" />
    <result column="save_money" jdbcType="DOUBLE" property="saveMoney" />
    <result column="give_money" jdbcType="DOUBLE" property="giveMoney" />
    <result column="sale_money" jdbcType="DOUBLE" property="saleMoney" />
    <result column="shop" jdbcType="VARCHAR" property="shop" />
    <result column="grade" jdbcType="VARCHAR" property="grade" />
    <result column="time" jdbcType="TIMESTAMP" property="time" />
  </resultMap>


<!--  <resultMap id="GuradeResultMap" type="com.zomore.domain.ZomoreMemberInputRecord">
    <id column="id" jdbcType="INTEGER" property="id"/>
    <result column="member_num" jdbcType="VARCHAR" property="memberNum" />
    <result column="member_name" jdbcType="VARCHAR" property="memberName" />
    <result column="inputmoney" jdbcType="DOUBLE" property="inputmoney" />
    <result column="givemoney" jdbcType="DOUBLE" property="givemoney" />
    <association property="memberNumber"  jdbcType="com.zomore.domain.ZomoreMember">

      <result column="member_number" jdbcType="VARCHAR"  />

    </association>

  </resultMap>-->
<!--  <resultMap id="GuradeResultMap" type="com.zomore.utils.MemberInputRecordAndMemberVo">
  <id column="id" jdbcType="INTEGER" property="id"/>
  <result column="member_num" jdbcType="VARCHAR" property="memberNum" />
  <result column="member_name" jdbcType="VARCHAR" property="memberName" />
  <result column="inputmoney" jdbcType="DOUBLE" property="inputmoney" />
  <result column="givemoney" jdbcType="DOUBLE" property="givemoney" />
  <result column="member_number" jdbcType="VARCHAR"  />


  </resultMap>&ndash;&gt;-->



  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, member_num, member_name, save_money, give_money, sale_money, shop, grade, time
  </sql>
  <select id="selectByExample" parameterType="com.zomore.domain.ZomoreMemberInputExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from zomore_member_input
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from zomore_member_input
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from zomore_member_input
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.zomore.domain.ZomoreMemberInputExample">
    delete from zomore_member_input
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.zomore.domain.ZomoreMemberInput">
    insert into zomore_member_input (id, member_num, member_name, 
      save_money, give_money, sale_money, 
      shop, grade, time
      )
    values (#{id,jdbcType=INTEGER}, #{memberNum,jdbcType=VARCHAR}, #{memberName,jdbcType=VARCHAR}, 
      #{saveMoney,jdbcType=DOUBLE}, #{giveMoney,jdbcType=DOUBLE}, #{saleMoney,jdbcType=DOUBLE}, 
      #{shop,jdbcType=VARCHAR}, #{grade,jdbcType=VARCHAR}, #{time,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.zomore.domain.ZomoreMemberInput">
    insert into zomore_member_input
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="memberNum != null">
        member_num,
      </if>
      <if test="memberName != null">
        member_name,
      </if>
      <if test="saveMoney != null">
        save_money,
      </if>
      <if test="giveMoney != null">
        give_money,
      </if>
      <if test="saleMoney != null">
        sale_money,
      </if>
      <if test="shop != null">
        shop,
      </if>
      <if test="grade != null">
        grade,
      </if>
      <if test="time != null">
        time,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="memberNum != null">
        #{memberNum,jdbcType=VARCHAR},
      </if>
      <if test="memberName != null">
        #{memberName,jdbcType=VARCHAR},
      </if>
      <if test="saveMoney != null">
        #{saveMoney,jdbcType=DOUBLE},
      </if>
      <if test="giveMoney != null">
        #{giveMoney,jdbcType=DOUBLE},
      </if>
      <if test="saleMoney != null">
        #{saleMoney,jdbcType=DOUBLE},
      </if>
      <if test="shop != null">
        #{shop,jdbcType=VARCHAR},
      </if>
      <if test="grade != null">
        #{grade,jdbcType=VARCHAR},
      </if>
      <if test="time != null">
        #{time,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.zomore.domain.ZomoreMemberInputExample" resultType="java.lang.Long">
    select count(*) from zomore_member_input
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update zomore_member_input
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.memberNum != null">
        member_num = #{record.memberNum,jdbcType=VARCHAR},
      </if>
      <if test="record.memberName != null">
        member_name = #{record.memberName,jdbcType=VARCHAR},
      </if>
      <if test="record.saveMoney != null">
        save_money = #{record.saveMoney,jdbcType=DOUBLE},
      </if>
      <if test="record.giveMoney != null">
        give_money = #{record.giveMoney,jdbcType=DOUBLE},
      </if>
      <if test="record.saleMoney != null">
        sale_money = #{record.saleMoney,jdbcType=DOUBLE},
      </if>
      <if test="record.shop != null">
        shop = #{record.shop,jdbcType=VARCHAR},
      </if>
      <if test="record.grade != null">
        grade = #{record.grade,jdbcType=VARCHAR},
      </if>
      <if test="record.time != null">
        time = #{record.time,jdbcType=TIMESTAMP},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update zomore_member_input
    set id = #{record.id,jdbcType=INTEGER},
      member_num = #{record.memberNum,jdbcType=VARCHAR},
      member_name = #{record.memberName,jdbcType=VARCHAR},
      save_money = #{record.saveMoney,jdbcType=DOUBLE},
      give_money = #{record.giveMoney,jdbcType=DOUBLE},
      sale_money = #{record.saleMoney,jdbcType=DOUBLE},
      shop = #{record.shop,jdbcType=VARCHAR},
      grade = #{record.grade,jdbcType=VARCHAR},
      time = #{record.time,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.zomore.domain.ZomoreMemberInput">
    update zomore_member_input
    <set>
      <if test="memberNum != null">
        member_num = #{memberNum,jdbcType=VARCHAR},
      </if>
      <if test="memberName != null">
        member_name = #{memberName,jdbcType=VARCHAR},
      </if>
      <if test="saveMoney != null">
        save_money = #{saveMoney,jdbcType=DOUBLE},
      </if>
      <if test="giveMoney != null">
        give_money = #{giveMoney,jdbcType=DOUBLE},
      </if>
      <if test="saleMoney != null">
        sale_money = #{saleMoney,jdbcType=DOUBLE},
      </if>
      <if test="shop != null">
        shop = #{shop,jdbcType=VARCHAR},
      </if>
      <if test="grade != null">
        grade = #{grade,jdbcType=VARCHAR},
      </if>
      <if test="time != null">
        time = #{time,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.zomore.domain.ZomoreMemberInput">
    update zomore_member_input
    set member_num = #{memberNum,jdbcType=VARCHAR},
      member_name = #{memberName,jdbcType=VARCHAR},
      save_money = #{saveMoney,jdbcType=DOUBLE},
      give_money = #{giveMoney,jdbcType=DOUBLE},
      sale_money = #{saleMoney,jdbcType=DOUBLE},
      shop = #{shop,jdbcType=VARCHAR},
      grade = #{grade,jdbcType=VARCHAR},
      time = #{time,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>


  <select id="selectNumAndMoneyByName" parameterType="java.util.List" resultType="java.util.Map">

    select zmir.member_num as num,zmir.member_name as name,SUM(zmir.inputmoney) as inmoney,SUM(zmir.givemoney) as gimoney ,zm.member_grade as grade
    from  zomore_member_input_record zmir,zomore_member zm
    where zmir.member_name in
    <foreach collection="name" index="index" item="item" open="(" separator="," close=")">
    #{item}
    </foreach>
    and zmir.member_num = zm.member_number

    group by member_name
  </select>

<!-- <select id="selectAndGradePH" parameterType="java.util.List" resultMap="GuradeResultMap">

    select zmir.member_num as num,zmir.member_name as name,SUM(zmir.inputmoney) as inmoney,SUM(zmir.givemoney) as gimoney ,zm.member_grade as grade
    from  zomore_member_input_record zmir,zomore_member zm
    where zmir.member_name in
    <foreach collection="name" index="index" item="item" open="(" separator="," close=")">
      #{item}
    </foreach>
    and zmir.member_num = zm.member_number

    group by member_name
  </select>-->

  <!--PageResult<ZomoreMemberInputRecord> selectAllAndGrade(@Param("name") List<String> name);-->
  <select id="selectMemberInputRecordAndMemberVo" parameterType="java.util.List" resultType="com.zomore.utils.MemberInputRecordAndMemberVo">
    select zmir.member_num as memberNum,zmir.member_name as memberName,zmir.createtime as createtime,SUM(zmir.inputmoney) as inputMoney,SUM(zmir.givemoney) as giveMoney ,zm.member_grade as memberGuide
    from  zomore_member_input_record zmir,zomore_member zm
    where zmir.member_name in
    <foreach collection="name" index="index" item="item" open="(" separator="," close=")">
      #{item}
    </foreach>
    and zmir.member_num = zm.member_number

    group by member_name


  </select>
  <!--List<MemberInputRecordAndMemberVo>selectMemberInputRecordAndMemberVoBySearch(@Param("page")PageResult<MemberInputRecordAndMemberVo> page,@Param("memberName") String memberName,@Param("startime")String startime, @Param("endtime")String endtime,@Param("shiplevelName")String shiplevelName,@Param("name")List<String> name);
-->
  <select id="selectMemberInputRecordAndMemberVoBySearch" parameterType="java.util.List" resultType="com.zomore.utils.MemberInputRecordAndMemberVo">
     select zmir.member_num as memberNum,zmir.member_name as memberName,zmir.createtime as createtime,SUM(zmir.inputmoney) as inputMoney,SUM(zmir.givemoney) as giveMoney ,zm.member_grade as memberGuide
    from  zomore_member_input_record zmir,zomore_member zm
    where zmir.member_name LIKE '%${memberName}%'
    and zmir.member_num = zm.member_number
		and zm.member_grade LIKE '%${shiplevelName}%'
		and zmir.shop = #{shop}
      <if test="startime !=null and startime !=''">
      <![CDATA[
                and zmir.createtime >= #{startime}
                ]]>
      </if>
      <if test="endtime !=null and endtime !=''">
      <![CDATA[
                and zmir.createtime <= #{endtime}
                ]]>
      </if>
    group by member_name
  </select>


  <select id="selectOnlyName" resultType="string">
    SELECT DISTINCT member_name from zomore_member_input_record
    Where shop=#{shop}
  </select>

  <!--List<ZomoreMember> selectAllMemberLevel();-->
  <select id="selectAllMemberLevel" parameterType="string" resultType="com.zomore.domain.ZomoreMember">
    SELECT DISTINCT member_grade as memberGrade from zomore_member
    where member_shop = #{shop}

  </select>
</mapper>