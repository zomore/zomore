<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.zomore.dao.ZomoreMemberInputRecordMapper">
  <resultMap id="BaseResultMap" type="com.zomore.domain.ZomoreMemberInputRecord">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="member_num" jdbcType="VARCHAR" property="memberNum" />
    <result column="member_name" jdbcType="VARCHAR" property="memberName" />
    <result column="inputmoney" jdbcType="DOUBLE" property="inputmoney" />
    <result column="givemoney" jdbcType="DOUBLE" property="givemoney" />
    <result column="createtime" jdbcType="TIMESTAMP" property="createtime" />
    <result column="shop" jdbcType="VARCHAR" property="shop" />
    <result column="cashier" jdbcType="VARCHAR" property="cashier" />
    <result column="guide" jdbcType="VARCHAR" property="guide" />
    <result column="type" jdbcType="VARCHAR" property="type" />
    <result column="project" jdbcType="VARCHAR" property="project" />
    <result column="state" jdbcType="INTEGER" property="state" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, member_num, member_name, inputmoney, givemoney, createtime, shop, cashier, guide, 
    type, project, state
  </sql>
  <select id="selectByExample" parameterType="com.zomore.domain.ZomoreMemberInputRecordExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from zomore_member_input_record
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExampleOther" parameterType="com.zomore.domain.ZomoreMemberInputRecordExample" resultMap="BaseResultMap">
    select distinct
    <include refid="Base_Column_List" />
    from zomore_member_input_record
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByCreateTimeDesc" parameterType="com.zomore.domain.ZomoreMemberInputRecordExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from zomore_member_input_record
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>

      order by createtime desc

  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from zomore_member_input_record
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from zomore_member_input_record
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.zomore.domain.ZomoreMemberInputRecordExample">
    delete from zomore_member_input_record
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.zomore.domain.ZomoreMemberInputRecord">
    insert into zomore_member_input_record (id, member_num, member_name, 
      inputmoney, givemoney, createtime, 
      shop, cashier, guide, 
      type, project, state
      )
    values (#{id,jdbcType=INTEGER}, #{memberNum,jdbcType=VARCHAR}, #{memberName,jdbcType=VARCHAR}, 
      #{inputmoney,jdbcType=DOUBLE}, #{givemoney,jdbcType=DOUBLE}, #{createtime,jdbcType=TIMESTAMP}, 
      #{shop,jdbcType=VARCHAR}, #{cashier,jdbcType=VARCHAR}, #{guide,jdbcType=VARCHAR}, 
      #{type,jdbcType=VARCHAR}, #{project,jdbcType=VARCHAR}, #{state,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.zomore.domain.ZomoreMemberInputRecord">
    insert into zomore_member_input_record
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="memberNum != null">
        member_num,
      </if>
      <if test="memberName != null">
        member_name,
      </if>
      <if test="inputmoney != null">
        inputmoney,
      </if>
      <if test="givemoney != null">
        givemoney,
      </if>
      <if test="createtime != null">
        createtime,
      </if>
      <if test="shop != null">
        shop,
      </if>
      <if test="cashier != null">
        cashier,
      </if>
      <if test="guide != null">
        guide,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="project != null">
        project,
      </if>
      <if test="state != null">
        state,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="memberNum != null">
        #{memberNum,jdbcType=VARCHAR},
      </if>
      <if test="memberName != null">
        #{memberName,jdbcType=VARCHAR},
      </if>
      <if test="inputmoney != null">
        #{inputmoney,jdbcType=DOUBLE},
      </if>
      <if test="givemoney != null">
        #{givemoney,jdbcType=DOUBLE},
      </if>
      <if test="createtime != null">
        #{createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="shop != null">
        #{shop,jdbcType=VARCHAR},
      </if>
      <if test="cashier != null">
        #{cashier,jdbcType=VARCHAR},
      </if>
      <if test="guide != null">
        #{guide,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        #{type,jdbcType=VARCHAR},
      </if>
      <if test="project != null">
        #{project,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        #{state,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.zomore.domain.ZomoreMemberInputRecordExample" resultType="java.lang.String">
    select count(*) from zomore_member_input_record
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update zomore_member_input_record
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.memberNum != null">
        member_num = #{record.memberNum,jdbcType=VARCHAR},
      </if>
      <if test="record.memberName != null">
        member_name = #{record.memberName,jdbcType=VARCHAR},
      </if>
      <if test="record.inputmoney != null">
        inputmoney = #{record.inputmoney,jdbcType=DOUBLE},
      </if>
      <if test="record.givemoney != null">
        givemoney = #{record.givemoney,jdbcType=DOUBLE},
      </if>
      <if test="record.createtime != null">
        createtime = #{record.createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.shop != null">
        shop = #{record.shop,jdbcType=VARCHAR},
      </if>
      <if test="record.cashier != null">
        cashier = #{record.cashier,jdbcType=VARCHAR},
      </if>
      <if test="record.guide != null">
        guide = #{record.guide,jdbcType=VARCHAR},
      </if>
      <if test="record.type != null">
        type = #{record.type,jdbcType=VARCHAR},
      </if>
      <if test="record.project != null">
        project = #{record.project,jdbcType=VARCHAR},
      </if>
      <if test="record.state != null">
        state = #{record.state,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update zomore_member_input_record
    set id = #{record.id,jdbcType=INTEGER},
      member_num = #{record.memberNum,jdbcType=VARCHAR},
      member_name = #{record.memberName,jdbcType=VARCHAR},
      inputmoney = #{record.inputmoney,jdbcType=DOUBLE},
      givemoney = #{record.givemoney,jdbcType=DOUBLE},
      createtime = #{record.createtime,jdbcType=TIMESTAMP},
      shop = #{record.shop,jdbcType=VARCHAR},
      cashier = #{record.cashier,jdbcType=VARCHAR},
      guide = #{record.guide,jdbcType=VARCHAR},
      type = #{record.type,jdbcType=VARCHAR},
      project = #{record.project,jdbcType=VARCHAR},
      state = #{record.state,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.zomore.domain.ZomoreMemberInputRecord">
    update zomore_member_input_record
    <set>
      <if test="memberNum != null">
        member_num = #{memberNum,jdbcType=VARCHAR},
      </if>
      <if test="memberName != null">
        member_name = #{memberName,jdbcType=VARCHAR},
      </if>
      <if test="inputmoney != null">
        inputmoney = #{inputmoney,jdbcType=DOUBLE},
      </if>
      <if test="givemoney != null">
        givemoney = #{givemoney,jdbcType=DOUBLE},
      </if>
      <if test="createtime != null">
        createtime = #{createtime,jdbcType=TIMESTAMP},
      </if>
      <if test="shop != null">
        shop = #{shop,jdbcType=VARCHAR},
      </if>
      <if test="cashier != null">
        cashier = #{cashier,jdbcType=VARCHAR},
      </if>
      <if test="guide != null">
        guide = #{guide,jdbcType=VARCHAR},
      </if>
      <if test="type != null">
        type = #{type,jdbcType=VARCHAR},
      </if>
      <if test="project != null">
        project = #{project,jdbcType=VARCHAR},
      </if>
      <if test="state != null">
        state = #{state,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.zomore.domain.ZomoreMemberInputRecord">
    update zomore_member_input_record
    set member_num = #{memberNum,jdbcType=VARCHAR},
      member_name = #{memberName,jdbcType=VARCHAR},
      inputmoney = #{inputmoney,jdbcType=DOUBLE},
      givemoney = #{givemoney,jdbcType=DOUBLE},
      createtime = #{createtime,jdbcType=TIMESTAMP},
      shop = #{shop,jdbcType=VARCHAR},
      cashier = #{cashier,jdbcType=VARCHAR},
      guide = #{guide,jdbcType=VARCHAR},
      type = #{type,jdbcType=VARCHAR},
      project = #{project,jdbcType=VARCHAR},
      state = #{state,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>